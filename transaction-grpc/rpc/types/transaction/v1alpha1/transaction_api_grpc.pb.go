// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transaction_api.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionAPIService_TransferMoney_FullMethodName         = "/transaction.v1alpha1.TransactionAPIService/TransferMoney"
	TransactionAPIService_GetTransactionHistory_FullMethodName = "/transaction.v1alpha1.TransactionAPIService/GetTransactionHistory"
)

// TransactionAPIServiceClient is the client API for TransactionAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionAPIServiceClient interface {
	TransferMoney(ctx context.Context, in *TransferMoneyRequest, opts ...grpc.CallOption) (*TransferMoneyResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
}

type transactionAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionAPIServiceClient(cc grpc.ClientConnInterface) TransactionAPIServiceClient {
	return &transactionAPIServiceClient{cc}
}

func (c *transactionAPIServiceClient) TransferMoney(ctx context.Context, in *TransferMoneyRequest, opts ...grpc.CallOption) (*TransferMoneyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferMoneyResponse)
	err := c.cc.Invoke(ctx, TransactionAPIService_TransferMoney_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionAPIServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, TransactionAPIService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionAPIServiceServer is the server API for TransactionAPIService service.
// All implementations must embed UnimplementedTransactionAPIServiceServer
// for forward compatibility.
type TransactionAPIServiceServer interface {
	TransferMoney(context.Context, *TransferMoneyRequest) (*TransferMoneyResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	mustEmbedUnimplementedTransactionAPIServiceServer()
}

// UnimplementedTransactionAPIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionAPIServiceServer struct{}

func (UnimplementedTransactionAPIServiceServer) TransferMoney(context.Context, *TransferMoneyRequest) (*TransferMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (UnimplementedTransactionAPIServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedTransactionAPIServiceServer) mustEmbedUnimplementedTransactionAPIServiceServer() {}
func (UnimplementedTransactionAPIServiceServer) testEmbeddedByValue()                               {}

// UnsafeTransactionAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionAPIServiceServer will
// result in compilation errors.
type UnsafeTransactionAPIServiceServer interface {
	mustEmbedUnimplementedTransactionAPIServiceServer()
}

func RegisterTransactionAPIServiceServer(s grpc.ServiceRegistrar, srv TransactionAPIServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionAPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionAPIService_ServiceDesc, srv)
}

func _TransactionAPIService_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAPIServiceServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionAPIService_TransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAPIServiceServer).TransferMoney(ctx, req.(*TransferMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionAPIService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAPIServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionAPIService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAPIServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionAPIService_ServiceDesc is the grpc.ServiceDesc for TransactionAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.v1alpha1.TransactionAPIService",
	HandlerType: (*TransactionAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferMoney",
			Handler:    _TransactionAPIService_TransferMoney_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _TransactionAPIService_GetTransactionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction_api.proto",
}
